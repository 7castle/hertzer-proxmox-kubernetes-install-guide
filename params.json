{
  "name": "Hertzer-proxmox-kubernetes-install-guide",
  "tagline": "How to setup proxmox on a dedicated hertzer server & Create a kubernetes cluster ",
  "body": "# Installing Kubernetes on Proxox\r\n\r\nFor this example i shall be using a dedicated server from Hertzner.https://www.hetzner.de/en/. A shout out to hetzner if your looking for cheap and beefy dedicated hosting then these guys are your best bet.\r\n\r\n# Setting up the Hertzer server\r\n\r\nThis guide assumes your server has Debian 8 (Jessie installed)\r\n\r\n#### Config when tested\r\n\r\nIntel Core i7-920\r\n\r\nHDD2x HDD 2,0 TB SATA Enterprise\r\n\r\nRAM6x RAM DDR3 8192 MB = 42 GB\r\n\r\n## Step one - Install Proxmox\r\n\r\nYou will begin by creating a new apt source for Proxmox\r\n\r\n```sh\r\nvim /etc/apt/sources.list.d/proxmox.list\r\n```\r\n\r\nOnce you have added the new apt soource you will add the repo key\r\n\r\n```sh\r\nwget -O- \"http://download.proxmox.com/debian/key.asc\" | apt-key add -\r\n```\r\n\r\nYou will now need to update the system repos\r\n\r\n```sh\r\napt-get update && apt-get dist-upgrade\r\n```\r\n\r\nNow you will need to install the Proxmox VE kernel\r\n\r\n```sh\r\npve-firmware pve-kernel-4.4.8-1-pve pve-headers-4.4.8-1-pve\r\n```\r\n\r\nNow reboot the machine to load in the new kernel, \r\n\r\nOnce the machine is in an up state you can install core the main Proxmox application.\r\n\r\n```sh\r\napt-get install proxmox-ve\r\n```\r\n\r\nOnce again reboot your machine, When the machine is once again in an upstate you will be able to access the web-ui for proxmox https://{YOUR_IP}:8006/. You will be able to login with your root credentials. \r\n\r\nWHOLLA you have Proxmox installed and running, You you will need to configure all the networking.\r\n\r\n### Step two - Networking\r\n\r\nYour eth0 interface should have already been pre-configured\r\n\r\n```sh\r\nauto  eth0\r\niface eth0 inet static\r\n  address   PUBLIC_IP\r\n  netmask   255.255.255.192\r\n  gateway   GATEWAY_IP\r\n  # default route to access subnet\r\n  up route add -net NET_IP netmask 255.255.255.192 gw GATEWAY_IP eth0\r\n\r\n```\r\n\r\nNow we will need to create an internal network for virtual machines to connect and communicate with, This will be the backbone of the entire cluster. We will accomplish this by creating a linux bridge.\r\n\r\n```sh\r\nauto vmbr0\r\niface vmbr1 inet static\r\n    address 10.20.30.1\r\n    netmask 255.255.255.0\r\n    bridge_ports none\r\n    bridge_stp off\r\n    bridge_fd 0\r\n    post-up iptables -t nat -A POSTROUTING -s '10.20.30.0/24' -o eth0 -j MASQUERADE\r\n    post-down iptables -t nat -D POSTROUTING -s '10.20.30.0/24' -o eth0 -j MASQUERADE\r\n\r\n```\r\n\r\nNow that we have the interfaces configured we need to configure the host server to act as our router, As such we need to make sure the kernel has packet forwarding enabled.\r\n\r\n```sh\r\nvim /etc/sysctl.conf\r\n```\r\n\r\nOnly alter/uncomment these lines\r\n```sh\r\nnet.ipv4.ip_forward=1\r\nnet.ipv6.conf.all.forwarding=1\r\n```\r\n\r\nLastly you will need to ensure we dont send ICPM redirect messages\r\n\r\n```sh\r\nvim /etc/sysctl.con\r\n```\r\n\r\nI need to give a shout out to https://blog.no-panic.at/2016/08/09/proxmox-on-debian-at-hetzner-with-multiple-ip-addresses/ this helped me massivly trying to figure this out\r\n\r\n```sh\r\nnet.ipv4.conf.all.send_redirects=0\r\n```\r\n\r\nFinally reboot the host and your good to go !\r\n\r\n### Step three - Creating the vms\r\n\r\nNow you have your host networking setup your ready to create your virtual machines, for this setup we will be creating a cluster of 3.\r\n\r\nThe layout will be,\r\n\r\n```sh\r\nnode-01 10.20.30.101\r\nnode-02 10.20.30.102\r\nnode-03 10.20.30.103\r\n```\r\n\r\nWe will be using ubuntu 16.04 for each node, to start ssh into your main Proxmox box and download the Ubuntu ISO the Proxmox template directory, This is so Proxmox can see the ISO to mount it.\r\n\r\n```sh\r\ncd /var/lib/vz/template/iso\r\nwget http://releases.ubuntu.com/16.04.1/ubuntu-16.04.1-server-amd64.iso?_ga=1.150784255.852713614.1480375703\r\nmv ubuntu-16.04.1-server-amd64.iso?_ga=1.150784255.852713614.1480375703 ubuntu-16.04.1-server-amd64.iso\r\n```\r\n\r\nYou will now be able to select this ISO when you create your VMS.\r\n\r\nNow login to your Proxmox web-ui https://{MAIN_IP}:8006/ with your system credentials.\r\n\r\n- Input the hostname, e.g node-01\r\n- For OS select linux 4.X/3.X/2.6\r\n- For CD/DVD select from the ISO select menu your downloaded ISO\r\n- For Hard Disk i recommend 200GB per VM, Space permitting.\r\n- For CPU use 1 core, Cpu spec permitting.\r\n- For Memory 4GB, Again memory permitting.\r\n- For Networking select NAT mode\r\n- Then confirm\r\n\r\nNow you will also need to add one more network adapter, This adapter will utilize the bridge we created in the previous section.\r\n\r\n- Select the new VM from the \"Server View\"\r\n- Find the Hardware option\r\n- Select \"Add\" and select \"Network Device\"\r\n- We need a \"Bridged mode\" interface, select bridge vmbr0.\r\n- Change the \"Model\" to Intel E1000. These are issues with the standard virtualised network drivers.\r\n- Add\r\n\r\nNow you can turn on your VM.\r\n\r\nInstall ubuntu as you normally would, By be sure to use the NAT adapter when you install. We will configure the Bridge adapter later.\r\n\r\nYou will need to repeat this step three times for each VM. Or you can create a template from the first VM you created and clone it three times.\r\n\r\n\r\n### Step four - Configure VM Network\r\n\r\nOnce ubuntu is installed you will need to setup the networking for each VM. Connect to node-01 with VNC from the web-ui and login.\r\n\r\nNext you will need to configure the adapters, Open up /etc/network/interfaces\r\n\r\n```sh\r\nvim /etc/network/interfaces\r\n\r\nauto ens18\r\niface ens18 inet dhcp\r\n```\r\n\r\nYour NAT adapter should have already been configured for you, We will now add the Bridged adapter. Add the below to the config.\r\n\r\n```sh\r\nvim /etc/network/interfaces\r\n\r\nADD THIS\r\n\r\nauto ens19\r\niface ens19 inet static\r\n        address 10.20.30.101\r\n        netmask 255.255.255.0\r\n        gateway 10.20.30.1\r\n```\r\n\r\nNow restart the networking service\r\n\r\n```sh\r\nsudo serivce restart networking\r\n```\r\n\r\nTry to ping the Hertzer host\r\n\r\n```sh\r\nping 10.20.30.1\r\n```\r\n\r\nIf you are able to ping the host then !! It worked, Your Virtual machine is connected to the main host via the network bridge with its own adapter.\r\n\r\nYou can confirm this by connecting to the new VM with an SSH tunnel through the hertzer host\r\n\r\n```sh\r\nADDRESSS = 10.20.30.101 OR 10.20.30.102 or 10.20.30.103\r\nssh -A -t root@{MAIN_IP} ssh -A -t {VM_USER}@{ADDRESSS}\r\n```\r\n\r\nYou will need to first input the hertzer hosts password then your new VMS credential. if everything was setup properly then you should be able to SSH into your new VM.\r\n\r\nThis model uses the NAT adapter to connect to the internet, But you could remove the NAT adapter and just use the private network and use 10.20.30.1 as the network gateway.\r\n\r\nYou will need to repeat this for each of the VMs assigning each VM a diffrent IP.\r\n\r\n```sh\r\nnode-01 10.20.30.101\r\nnode-02 10.20.30.102\r\nnode-03 10.20.30.103\r\n```\r\n\r\nYou now have a 3 node VM cluster connected via a private network that you can ssh into.\r\n\r\n\r\n### Step four - Install kubernetes\r\n\r\nNow you will need to install Kuberntees on each of your nodes, So for each VM repeat this process.\r\n\r\nAdd the kubernetes repo to your sources list\r\n\r\n```sh\r\nvim /etc/apt/sources.list.d/kubernetes.list\r\n\r\ndeb http://apt.kubernetes.io/ kubernetes-xenial main\r\n``\r\n\r\nLoad in the new repo list\r\n\r\n```sh\r\napt-get update\r\n```\r\n\r\nInstall base packages\r\n\r\n```sh\r\napt-get install -y docker.io kubelet kubeadm kubectl kubernetes-cni\r\n```\r\n\r\nOnce these packages are installed we can create our base cluster.\r\n\r\nWe will use node-01 as the master \r\n\r\n```sh\r\nssh -A -t root@{MAIN_IP} ssh -A -t {VM_USER}@10.20.30.101\r\n```\r\n\r\nOn the master we can used the installed kubeadm tool\r\n\r\n```sh\r\nkubeadm init\r\n```\r\n\r\nThis will take several minutes to configure, Once the process finished you will be given a list of detailed that you MUST SAVE.\r\n\r\n```sh\r\n{VM_USER}@node-01:~# kubeadm init\r\n<master/tokens> generated token: \"7fa96f.ddb39492a1874689\"\r\n<master/pki> created keys and certificates in \"/etc/kubernetes/pki\"\r\n<util/kubeconfig> created \"/etc/kubernetes/admin.conf\"\r\n<util/kubeconfig> created \"/etc/kubernetes/kubelet.conf\"\r\n<master/apiclient> created API client configuration\r\n<master/apiclient> created API client, waiting for the control plane to become ready\r\n<master/apiclient> all control plane components are healthy after 23.098433 seconds\r\n<master/apiclient> waiting for at least one node to register and become ready\r\n<master/apiclient> first node is ready after 10.034029 seconds\r\n<master/discovery> created essential addon: kube-discovery, waiting for it to become ready\r\n<master/discovery> kube-discovery is ready after 30.44947 seconds\r\n<master/addons> created essential addon: kube-proxy\r\n<master/addons> created essential addon: kube-dns\r\n\r\nKubernetes master initialised successfully!\r\n\r\nYou can now join any number of machines by running the following on each node:\r\n\r\nkubeadm join --token 7fa96f.ddb39492a1874689 10.20.30.1\r\n```\r\n\r\nThe most important command is the kubeadm join command, You need to keep this secret if someone get the token and your master IP they will be able to automatically add nodes to your cluster.\r\n\r\nNow install the POD network\r\n\r\n```sh\r\nkubectl apply -f https://git.io/weave-kube\r\n```\r\n\r\nBecuase we have a small number of nodes we also want to use our master server as a minion\r\n\r\n```sh\r\nkubectl taint nodes --all dedicated-\r\n```\r\n\r\nNow you are ready to connect your minions nodes to the master, Assuming you have installed the base packes on node-02 and node-3 simply run,\r\n\r\n```sh\r\nkubeadm join --token 7fa96f.ddb39492a1874689 10.20.30.1\r\n```\r\n\r\nThis will configure each node.\r\n\r\nTo check that the nodes are all checked in run,\r\n\r\n```sh\r\nkubectl get nodes\r\n\r\nNAME      STATUS    AGE\r\nnode-01   Ready     7h\r\nnode-02   Ready     7h\r\nnode-03   Ready     5h\r\n```\r\n\r\nYou should be an output like the one above, Congrats you have a kuberntes cluster.\r\n\r\n### Step five - Setup kubectl on your local machine\r\n\r\nTODO\r\n\r\n```sh\r\nkubectl config set-credentials ubuntu --username={KUBE_USER} --password={KUBE_PASSWORD}\r\nkubectl config set-cluster personal --server=http://{MAIN_IP}:8080\r\nkubectl config set-context personal-context --cluster=personal --user=ubuntu\r\nkubectl config use-context personal-context\r\nkubectl config set contexts.personal-context.namespace the-right-prefix\r\nkubectl config view\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}